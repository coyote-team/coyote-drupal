<?php

use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\coyote_img_desc\Constants;
use Drupal\coyote_img_desc\Hook\EntityViewAlterPostRenderHook;
use Drupal\coyote_img_desc\Hook\ViewsViewAlterPostRenderHook;
use Drupal\coyote_img_desc\Util;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;

require_once(__DIR__ . '/vendor/autoload.php');

/**
 * Implements hook_entity_view_alter().
 *
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function coyote_img_desc_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display): void
{
  $build['#coyote_node_url'] = $entity->toUrl('canonical', ['absolute' => true])->toString();
  $build['#post_render'][] = [EntityViewAlterPostRenderHook::class, 'hook'];
}

/**
 * Implements hook_views_post_render().
 *
 * @param \Drupal\views\ViewExecutable $view
 * @param array $output
 * @param \Drupal\views\Plugin\views\cache\CachePluginBase $cache
 */
function coyote_img_desc_views_post_render(ViewExecutable $view, array &$output, CachePluginBase $cache): void
{
  $host = \Drupal::request()->getSchemeAndHttpHost();
  $path = $view->getPath();

  if (is_null($path)){
     $path = Url::fromRoute('<current>');
  }

  $output['#coyote_node_url'] = $host."/" . $path;
  $output['#post_render'][] = [ViewsViewAlterPostRenderHook::class, 'hook'];
}

/**
 * Implements hook_field_widget_complete_form_alter().
 *
 * @param $field_widget_complete_form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $context
 */
function coyote_img_desc_field_widget_complete_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context): void
{
    if (
      !isset($field_widget_complete_form['#attributes']['class'][0]) ||
      $field_widget_complete_form['#attributes']['class'][0] !== "field--type-image" ||
      !isset($field_widget_complete_form['widget'][0])
    ) {
      return;
    }

    $desc = $field_widget_complete_form['widget'][0]['#description'];

    if ($desc) {
        $desc .= " <br />\n";
    }

    $link = Util::getCoyoteLink();
    $desc .= t("Image alternative text descriptions are managed by {$link}");

    $field_widget_complete_form['widget'][0]['#description'] = $desc;
    $field_widget_complete_form['widget'][0]['#alt_field_required'] = false;
    $field_widget_complete_form['#after_build'][] = "coyote_img_desc_image_form_after_build";
}

/**
 * Implements hook_form_after_build().
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormState $form_state
 *
 * @return array
 */
function coyote_img_desc_image_form_after_build(array $form, FormState $form_state) {
   $form['widget'][0]['alt']['#attributes']['readonly'] = "readonly";
   $form['widget'][0]['alt']['#attributes']['style'] = "background: #eeeeee";

   return $form;  
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function coyote_img_desc_form_editor_image_dialog_alter(&$form, FormStateInterface $form_state, $form_id): void
{
    $desc = $form['attributes']['alt']['#description'];

    if ($desc) {
        $desc .= " <br />\n";
    }

    $link = Util::getCoyoteLink();
    $text = t("Image alternative text descriptions are managed by {$link}");

    $desc .= "<strong>".t($text)."</strong>";

    $form['attributes']['alt']['#description'] = $desc;
    $form['attributes']['alt']['#required'] = false;
    $form['attributes']['alt']['#attributes']['readonly'] = "readonly";
    $form['attributes']['alt']['#attributes']['style'] = "background: #eeeeee";
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function coyote_img_desc_form_alter(&$form, &$form_state, $form_id): void
{
  $form_regex = '/^node_([a-z]+)_(edit_)?form$/';

  if (preg_match($form_regex, $form_id) !== 1) {
    // only hook into node_TYPE_form and node_TYPE_edit_form
    return;
  }

  $form['#attached']['library'][] = Constants::CKEDITOR5_LIBRARY;
}

use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 *
 * @param $route_name
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *
 * @return string
 */
function coyote_img_desc_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.coyote_img_desc':
      $text = file_get_contents(__DIR__ . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      } else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }

  return '';
}